package emotion.dao;import input.vo.InputNounVO;import input.vo.InputVO;import input.vo.InputVerbVO;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import emotion.vo.EmoWordVO;public class EmotionDao {	public static final String driver = "com.mysql.jdbc.Driver";	public static final String url = "jdbc:mysql://127.0.0.1:3306/aimoodule1?useUnicode=yes&characterEncoding=UTF-8";	public static final String user = "root";	public static final String passwd = "q1w2e3r4t5";	public static final int MAXOFWORD = 3;	public static final String patternWord[] = {"나","저","우리","저희","너","너희","당신","그대","그","그녀","누구","자기","이것","저것","그것","무엇","어디","것"};		private boolean Pattern(String word){		int patternSize = patternWord.length;		for(int i=0;i<patternSize; i++){				if(word.equals(patternWord[i])){				return true;			}		}				return false;	}	public EmotionDao() {		try {			Class.forName(driver);		} catch (Exception e) {			e.printStackTrace();			throw new RuntimeException("DB 연결 오류");		}	}	public ArrayList<InputNounVO> emoNounCountRow(Object obj) {		Connection conn = null;		PreparedStatement pstmt = null;		ResultSet rs = null;		InputVO vo = (InputVO) obj;		ArrayList<InputNounVO> nounVOList = new ArrayList<InputNounVO>();		ArrayList<Integer> emoCount = null;		String query;		int size = vo.getNounList().size();		for (int i = 0; i < size; i++) {			if (vo.getNounList() == null)				continue;			String noun = vo.getNounList().get(i);			emoCount = new ArrayList<Integer>();			query = "select text, angry,happy, love, sad "					+ "from aimoodule1.test_emo " + "where text like '%" + noun					+ "%';";			try {				conn = DriverManager.getConnection(url, user, passwd);				pstmt = conn.prepareStatement(query);				rs = pstmt.executeQuery();				if (rs.next()) {					emoCount.add(rs.getInt("angry") + 1);					emoCount.add(rs.getInt("happy") + 1);					emoCount.add(rs.getInt("love") + 1);					emoCount.add(rs.getInt("sad") + 1);					nounVOList.add(new InputNounVO(noun, emoCount));				}			} catch (SQLException e) {				e.printStackTrace();			} finally {				try {					conn.close();				} catch (SQLException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			}		}		return nounVOList;	}	public ArrayList<InputVerbVO> emoVerbCountRow(Object obj) {		Connection conn = null;		PreparedStatement pstmt = null;		ResultSet rs = null;		InputVO vo = (InputVO) obj;		ArrayList<InputVerbVO> verbVOList = new ArrayList<InputVerbVO>();		ArrayList<Integer> emoCount = null;		String query;		int size = vo.getVerbList().size();				for (int i = 0; i < size; i++) {			String verb = vo.getVerbList().get(i);						if(verb.length() < 2)				continue;									emoCount = new ArrayList<Integer>();			query = "select text, angry,happy, love, sad "					+ "from aimoodule1.test_emo " + "where text like '%" + verb					+ "%';";			try {				conn = DriverManager.getConnection(url, user, passwd);				pstmt = conn.prepareStatement(query);				rs = pstmt.executeQuery();				if (rs.next()) {					emoCount.add(rs.getInt("angry") + 1);					emoCount.add(rs.getInt("happy") + 1);					emoCount.add(rs.getInt("love") + 1);					emoCount.add(rs.getInt("sad") + 1);					verbVOList.add(new InputVerbVO(verb, emoCount));				}			} catch (SQLException e) {				e.printStackTrace();			} finally {				try {					conn.close();				} catch (SQLException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			}		}		return verbVOList;	}	public int insertTextList(ArrayList<InputVO> vo) {		Connection conn = null;		PreparedStatement pstmt = null;		int flag = 0;		String query = "insert into aimoodule1.text_emotion values (?,?)";		try {			int size = vo.size();			conn = DriverManager.getConnection(url, user, passwd);			for (int i = 0; i < size; i++) {				pstmt = conn.prepareStatement(query);				pstmt.setString(1, vo.get(i).getInputText());				pstmt.setInt(2, vo.get(i).getTextEmotion());				flag = pstmt.executeUpdate();			}		} catch (Exception e) {			e.printStackTrace();		} finally {			try {				conn.close();			} catch (SQLException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}		return flag;	}	public int insertNounList(ArrayList<EmoWordVO> vo) {		Connection conn = null;		PreparedStatement pstmt = null;		int flag = 0;		String query = "insert into aimoodule1.word_emotion values (?,?,?)";		String updateQuery = "update aimoodule1.word_emotion set count=count+1 where word=? and emo=? ";		try {			int size = vo.size();			conn = DriverManager.getConnection(url, user, passwd);			for (int i = 0; i < size; i++) {				int size2 = vo.get(i).getNounList().size();				for (int j = 0; j < size2; j++) {										if(this.Pattern(vo.get(i).getNounList().get(j))){						continue;					}										try {						pstmt = conn.prepareStatement(query);						pstmt.setString(1, vo.get(i).getNounList().get(j));						pstmt.setInt(2, vo.get(i).getEmo());						pstmt.setInt(3, 1);						flag = pstmt.executeUpdate();					} catch (Exception e) {						pstmt = conn.prepareStatement(updateQuery);						pstmt.setString(1, vo.get(i).getNounList().get(j));						pstmt.setInt(2, vo.get(i).getEmo());						flag = pstmt.executeUpdate();					}				}			}		} catch (Exception e) {			e.printStackTrace();		} finally {			try {				conn.close();			} catch (SQLException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		}		return flag;	}	public double[] getTotalProb() {		String[] querys = new String[4];		querys[0] = "select text_emo,count(text_emo) from aimoodule1.text_emotion where text_emo=1 group by text_emo;";		querys[1] = "select text_emo,count(text_emo) from aimoodule1.text_emotion where text_emo=2 group by text_emo;";		querys[2] = "select text_emo,count(text_emo) from aimoodule1.text_emotion where text_emo=3 group by text_emo;";		querys[3] = "select text_emo,count(text_emo) from aimoodule1.text_emotion where text_emo=4 group by text_emo;";		Connection conn = null;		PreparedStatement pstmt = null;		ResultSet rs = null;		int[] emotions = new int[4];		emotions[0] = 0;		emotions[1] = 0;		emotions[2] = 0;		emotions[3] = 0;		try {			conn = DriverManager.getConnection(url, user, passwd);			for (int i = 0; i < 4; i++) {				pstmt = conn.prepareStatement(querys[i]);				rs = pstmt.executeQuery();				while (rs.next()) {					emotions[i] = rs.getInt(2);				}			}		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} finally {			try {				conn.close();			} catch (SQLException e) {				e.printStackTrace();			}		}		double[] result = new double[5];		double sum =  (double) (emotions[0] + emotions[1] + emotions[2] + emotions[3]);				result[0] = (double) (emotions[1] + emotions[2])/ sum;		result[1] = (double)(emotions[0])/sum;		result[2] = (double)(emotions[1])/sum;		result[3] = (double)(emotions[2])/sum;		result[4] = (double)(emotions[3])/sum;		return result;	}	public ArrayList<ArrayList<String>> getEmoWordList() {		Connection conn = null;		PreparedStatement pstmt = null;		ResultSet rs = null;		ArrayList<ArrayList<String>> words = new ArrayList<ArrayList<String>>();		ArrayList<String> temp;		String query[] = {				"select word,emo,count from aimoodule1.word_emotion where emo="						+ 1 + " order by count desc;",				"select word,emo,count from aimoodule1.word_emotion where emo="						+ 2 + " order by count desc;",				"select word,emo,count from aimoodule1.word_emotion where emo="						+ 3 + " order by count desc;",				"select word,emo,count from aimoodule1.word_emotion where emo="						+ 4 + " order by count desc;", };		try {			conn = DriverManager.getConnection(url, user, passwd);			for (int i = 0; i < 4; i++) {				pstmt = conn.prepareStatement(query[i]);				rs = pstmt.executeQuery();				int count = 0;				temp = new ArrayList<String>();				while (rs.next()) {					if (count >= MAXOFWORD)						break;					temp.add(rs.getString(1));					System.out.println(rs.getString(1));					count++;				}				words.add(temp);			}		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} finally {			try {				conn.close();			} catch (SQLException e) {				e.printStackTrace();			}		}		return words;	}}